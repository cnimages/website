<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>KubeSphere Presentations on KubeCon on </title>
    <link>https://kubesphere-v3.netlify.app/conferences/</link>
    <description>Recent content in KubeSphere Presentations on KubeCon on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    
	<atom:link href="https://kubesphere-v3.netlify.app/conferences/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Cloud Native Observability: Log Management</title>
      <link>https://kubesphere-v3.netlify.app/conferences/logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubesphere-v3.netlify.app/conferences/logging/</guid>
      <description>As logs often contain very valuable information, log management represents an important part of cloud native observability. Logs feature a standard output (stdout) in containers and Kubernetes, which is different from physical machines or virtual machines. This means the collection, analysis and management of logs at the platform level can be carried out in a unified fashion, which demonstrates the unique value of logs. This article introduces a major solution to log management (EFK) in the cloud native area, FluentBit Operator developed by the KubeSphere team and some practices of KubeSphere in multi-tenant log management.</description>
    </item>
    
    <item>
      <title>Development Practices of CSI Storage Plugins - Part â… </title>
      <link>https://kubesphere-v3.netlify.app/conferences/csi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubesphere-v3.netlify.app/conferences/csi/</guid>
      <description>Many users will transfer their apps to Kubernetes, where storage underlies applications. As users deploy their apps on the Kubernetes, some existing storage plugins are unable to satisfy the growing needs in terms of both diversity and functionality. This is why we need to accelerate the development of new storage plugins, and integrate QingCloud storage services with Kubernetes and KubeSphere.
Kubernetes Storage Plugin Classification In this article, we will focus on the development practices of Kubernetes storage plugins based on CSI.</description>
    </item>
    
    <item>
      <title>Porter: An Open Source Load Balancer for Kubernetes in a Bare Metal Environment</title>
      <link>https://kubesphere-v3.netlify.app/conferences/porter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kubesphere-v3.netlify.app/conferences/porter/</guid>
      <description>We know that we can use the service of LoadBalancer in the Kubernetes cluster to expose backend workloads externally. Cloud providers often offer cloud LoadBalancer plugins, which requires the cluster to be deployed on a specific IaaS platform. However, many enterprise users often deploy the Kubernetes cluster on bare metal, especially when it is used for the production environment. For the local bare metal cluster, Kubernetes does not provide LB implementation.</description>
    </item>
    
  </channel>
</rss>